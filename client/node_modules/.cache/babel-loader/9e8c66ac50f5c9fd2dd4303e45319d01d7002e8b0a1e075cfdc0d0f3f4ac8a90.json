{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC1A1\\uBE75\\uC900\\\\Desktop\\\\\\uC791\\uC5C5\\\\fareex\\\\client\\\\src\\\\main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './styles/main.css'; // main.css 파일 import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Main() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [newPostText, setNewPostText] = useState('');\n  useEffect(() => {\n    // 포스트 목록을 가져오는 로직\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/api/posts');\n        setPosts(response.data.posts);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    // 현재 로그인된 사용자의 정보를 가져오는 로직\n    const fetchUserData = async () => {\n      try {\n        // 로컬 스토리지에서 토큰을 가져옴\n        const token = localStorage.getItem('token');\n        if (token) {\n          // 토큰을 헤더에 추가하여 서버에 요청\n          const response = await axios.get('http://localhost:3001/api/user', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          setUsername(response.data.username);\n          setEmail(response.data.email);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchPosts();\n    fetchUserData();\n  }, []);\n  const handlePostSubmit = async () => {\n    try {\n      // 로컬 스토리지에서 토큰을 가져옴\n      const token = localStorage.getItem('token');\n\n      // 토큰이 없다면 로그인 페이지로 이동하거나 다른 처리를 수행할 수 있습니다.\n      if (!token) {\n        alert('로그인이 필요합니다.');\n        // 로그인 페이지로 이동 또는 다른 처리\n        return;\n      }\n      const response = await axios.post('http://localhost:3001/api/posts', {\n        content: newPostText\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(response.data.message);\n      setPosts([...posts, response.data.newPost]);\n      setNewPostText('');\n    } catch (error) {\n      console.error(error);\n      alert('포스트 등록 실패');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        placeholder: `안녕하세요, ${username}! 어떤 생각을 하고 계신가요?`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePostSubmit,\n        children: \"\\uD3EC\\uC2A4\\uD2B8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list-container\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"\\uC791\\uC131\\uC790: \", post.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(Main, \"uXKm69kpbSjCWHbkZ0M2DsbynIo=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Main","_s","posts","setPosts","username","setUsername","email","setEmail","newPostText","setNewPostText","fetchPosts","response","get","data","error","console","fetchUserData","token","localStorage","getItem","headers","Authorization","handlePostSubmit","alert","post","content","message","newPost","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onClick","map","id","_c","$RefreshReg$"],"sources":["C:/Users/송빵준/Desktop/작업/fareex/client/src/main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './styles/main.css'; // main.css 파일 import\r\n\r\nfunction Main() {\r\n  const [posts, setPosts] = useState([]);\r\n  const [username, setUsername] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [newPostText, setNewPostText] = useState('');\r\n\r\n  useEffect(() => {\r\n    // 포스트 목록을 가져오는 로직\r\n    const fetchPosts = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3001/api/posts');\r\n        setPosts(response.data.posts);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    // 현재 로그인된 사용자의 정보를 가져오는 로직\r\n    const fetchUserData = async () => {\r\n      try {\r\n        // 로컬 스토리지에서 토큰을 가져옴\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n          // 토큰을 헤더에 추가하여 서버에 요청\r\n          const response = await axios.get('http://localhost:3001/api/user', {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          });\r\n          setUsername(response.data.username);\r\n          setEmail(response.data.email);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchPosts();\r\n    fetchUserData();\r\n  }, []);\r\n\r\n  const handlePostSubmit = async () => {\r\n    try {\r\n      // 로컬 스토리지에서 토큰을 가져옴\r\n      const token = localStorage.getItem('token');\r\n      \r\n      // 토큰이 없다면 로그인 페이지로 이동하거나 다른 처리를 수행할 수 있습니다.\r\n      if (!token) {\r\n        alert('로그인이 필요합니다.');\r\n        // 로그인 페이지로 이동 또는 다른 처리\r\n        return;\r\n      }\r\n  \r\n      const response = await axios.post(\r\n        'http://localhost:3001/api/posts',\r\n        { content: newPostText },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n  \r\n      alert(response.data.message);\r\n      setPosts([...posts, response.data.newPost]);\r\n      setNewPostText('');\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert('포스트 등록 실패');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-container\">\r\n\r\n      <div className=\"user-info\">\r\n        {/* 로그인된 사용자 정보 */}\r\n        <p>{username}</p>\r\n        <p>{email}</p>\r\n      </div>\r\n\r\n      <div className=\"post-form-container\">\r\n        {/* 포스트 작성 폼 */}\r\n        <textarea placeholder={`안녕하세요, ${username}! 어떤 생각을 하고 계신가요?`} />\r\n        <button onClick={handlePostSubmit} >포스트</button>\r\n      </div>\r\n\r\n      <div className=\"post-list-container\">\r\n        {/* 포스트 목록 */}\r\n        {posts.map((post) => (\r\n          <div key={post.id} className=\"post\">\r\n            <p>{post.content}</p>\r\n            <span>작성자: {post.username}</span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}